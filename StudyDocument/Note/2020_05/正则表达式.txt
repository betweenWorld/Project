常用的操作正则表达式的方法和委托

1、静态方法  IsMatch(返回布尔类型，用于判断 字符串是否与 正则表达式 匹配)
	bool IsMatch(string input,string pattern);

2、静态方法  Match(返回一个包含有关匹配的信息的对象)
	Match Match(string input,string pattern);

3、静态方法Matches(在输入字符串中搜索与指定正则所匹配的项，返回所有匹配项)
	MatchCollection Matches(string input,string pattern);

4、replaces函数
正则主要是实现验证，提取，分割，替换字符的功能 .Replace函数是实现替换功能的
	Replace(string input,string pattern,string replacement)
	  input : 源字符串
	  pattern : 匹配条件
	  replacement : 替换的内容

@符号：正则表达式字符串前面加上@字符，这样不让编译器解析其中的转义字符

元字符
	\b	匹配单词的开始或结束
	\B	匹配非单词的开始或结束
	^	匹配必须出现在字符串的开头或行的开头
	$	匹配必须出现在以下位置：字符串结尾、字符串结尾处的 \n 之前或行的结尾
	

基本语法元字符
	.	匹配除换行符外的任意字符
	\w	匹配字母、数字、下划线、汉字	（大小写字母，0-9数字，下划线_）
	\W	\w的补集
	\s	匹配任意空白符			（包括换行符\n、回车符\r、制表符\t、垂直制表符\v、换页符\f）
	\S	\s的补集
	\d	匹配数字  （0-9）
	\D	\d的补集
	
	[ab]	匹配括号中的字符
	[a-c]	a字符到c字符之间是字符
	[^x]	匹配除了x以外的任意字符
	[^adwz]	匹配除了adwz这几个字符以外的任意字符

重复描述字符
	{n}	匹配前面的字符  n  次
	{n,}	匹配前面的字符  n  次  或  多于  n  次
	{n,m}	匹配前面的字符  n  到  m  次
	？	重复  0  次  或  1  次
	+	重复  1  次  或  更多次
	*	重复  0  次  或  更多次

择一匹配
	|	将两个匹配条件进行逻辑  "或"  （or） 运算















